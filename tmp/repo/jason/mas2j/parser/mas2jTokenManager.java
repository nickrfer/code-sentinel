/* Generated By:JavaCC: Do not edit this line. mas2jTokenManager.java */
package jason.mas2j.parser;
import java.util.*;
import java.io.*;
import jason.mas2j.*;
import jason.asSyntax.*;
import jason.asSemantics.*;
import jason.util.*;
import jason.infra.*;

public class mas2jTokenManager implements mas2jConstants
{
  public  java.io.PrintStream debugStream = System.out;
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0x712ff00L) != 0L)
         {
            jjmatchedKind = 29;
            return 88;
         }
         if ((active0 & 0x40000000000L) != 0L)
            return 45;
         if ((active0 & 0x400000L) != 0L)
         {
            jjmatchedKind = 29;
            return 14;
         }
         if ((active0 & 0x80000L) != 0L)
         {
            jjmatchedKind = 29;
            return 21;
         }
         if ((active0 & 0x80L) != 0L)
         {
            jjmatchedKind = 30;
            return 89;
         }
         if ((active0 & 0x200000L) != 0L)
         {
            jjmatchedKind = 29;
            return 5;
         }
         return -1;
      case 1:
         if ((active0 & 0x200000L) != 0L)
         {
            jjmatchedKind = 29;
            jjmatchedPos = 1;
            return 4;
         }
         if ((active0 & 0x75af700L) != 0L)
         {
            jjmatchedKind = 29;
            jjmatchedPos = 1;
            return 90;
         }
         if ((active0 & 0x80L) != 0L)
         {
            jjmatchedKind = 30;
            jjmatchedPos = 1;
            return 78;
         }
         if ((active0 & 0x800L) != 0L)
            return 90;
         return -1;
      case 2:
         if ((active0 & 0x77af700L) != 0L)
         {
            jjmatchedKind = 29;
            jjmatchedPos = 2;
            return 90;
         }
         if ((active0 & 0x80L) != 0L)
            return 78;
         return -1;
      case 3:
         if ((active0 & 0x77af700L) != 0L)
         {
            jjmatchedKind = 29;
            jjmatchedPos = 3;
            return 90;
         }
         return -1;
      case 4:
         if ((active0 & 0x772f700L) != 0L)
         {
            jjmatchedKind = 29;
            jjmatchedPos = 4;
            return 90;
         }
         if ((active0 & 0x80000L) != 0L)
            return 90;
         return -1;
      case 5:
         if ((active0 & 0x7727600L) != 0L)
         {
            jjmatchedKind = 29;
            jjmatchedPos = 5;
            return 90;
         }
         if ((active0 & 0x8100L) != 0L)
            return 90;
         return -1;
      case 6:
         if ((active0 & 0x120000L) != 0L)
            return 90;
         if ((active0 & 0x7607600L) != 0L)
         {
            jjmatchedKind = 29;
            jjmatchedPos = 6;
            return 90;
         }
         return -1;
      case 7:
         if ((active0 & 0x7607600L) != 0L)
         {
            jjmatchedKind = 29;
            jjmatchedPos = 7;
            return 90;
         }
         return -1;
      case 8:
         if ((active0 & 0x7605600L) != 0L)
         {
            jjmatchedKind = 29;
            jjmatchedPos = 8;
            return 90;
         }
         if ((active0 & 0x2000L) != 0L)
            return 90;
         return -1;
      case 9:
         if ((active0 & 0x1200000L) != 0L)
            return 90;
         if ((active0 & 0x6405600L) != 0L)
         {
            jjmatchedKind = 29;
            jjmatchedPos = 9;
            return 90;
         }
         return -1;
      case 10:
         if ((active0 & 0x6405400L) != 0L)
         {
            jjmatchedKind = 29;
            jjmatchedPos = 10;
            return 90;
         }
         if ((active0 & 0x200L) != 0L)
            return 90;
         return -1;
      case 11:
         if ((active0 & 0x400000L) != 0L)
            return 90;
         if ((active0 & 0x6005400L) != 0L)
         {
            jjmatchedKind = 29;
            jjmatchedPos = 11;
            return 90;
         }
         return -1;
      case 12:
         if ((active0 & 0x4000L) != 0L)
            return 90;
         if ((active0 & 0x6001400L) != 0L)
         {
            jjmatchedKind = 29;
            jjmatchedPos = 12;
            return 90;
         }
         return -1;
      case 13:
         if ((active0 & 0x4000400L) != 0L)
         {
            jjmatchedKind = 29;
            jjmatchedPos = 13;
            return 90;
         }
         if ((active0 & 0x2001000L) != 0L)
            return 90;
         return -1;
      case 14:
         if ((active0 & 0x4000000L) != 0L)
            return 90;
         if ((active0 & 0x400L) != 0L)
         {
            jjmatchedKind = 29;
            jjmatchedPos = 14;
            return 90;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0), pos + 1);
}
private final int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private final int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
private final int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 35:
         return jjStopAtPos(0, 40);
      case 40:
         return jjStopAtPos(0, 43);
      case 41:
         return jjStopAtPos(0, 45);
      case 44:
         return jjStopAtPos(0, 44);
      case 46:
         return jjStartNfaWithStates_0(0, 42, 45);
      case 58:
         return jjStopAtPos(0, 39);
      case 59:
         return jjStopAtPos(0, 41);
      case 61:
         return jjStopAtPos(0, 48);
      case 77:
         return jjMoveStringLiteralDfa1_0(0x80L);
      case 91:
         return jjStopAtPos(0, 46);
      case 93:
         return jjStopAtPos(0, 47);
      case 97:
         return jjMoveStringLiteralDfa1_0(0x3004900L);
      case 98:
         return jjMoveStringLiteralDfa1_0(0x4000000L);
      case 99:
         return jjMoveStringLiteralDfa1_0(0x2000L);
      case 100:
         return jjMoveStringLiteralDfa1_0(0x200000L);
      case 101:
         return jjMoveStringLiteralDfa1_0(0x8600L);
      case 105:
         return jjMoveStringLiteralDfa1_0(0x21000L);
      case 110:
         return jjMoveStringLiteralDfa1_0(0x80000L);
      case 115:
         return jjMoveStringLiteralDfa1_0(0x400000L);
      case 118:
         return jjMoveStringLiteralDfa1_0(0x100000L);
      case 123:
         return jjStopAtPos(0, 37);
      case 125:
         return jjStopAtPos(0, 38);
      default :
         return jjMoveNfa_0(6, 0);
   }
}
private final int jjMoveStringLiteralDfa1_0(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0);
      return 1;
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa2_0(active0, 0x80L);
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x4100000L);
      case 103:
         return jjMoveStringLiteralDfa2_0(active0, 0x3000100L);
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0x200000L);
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x2000L);
      case 110:
         return jjMoveStringLiteralDfa2_0(active0, 0x21200L);
      case 114:
         return jjMoveStringLiteralDfa2_0(active0, 0x80000L);
      case 115:
         return jjMoveStringLiteralDfa2_0(active0, 0x4000L);
      case 116:
         if ((active0 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(1, 11, 90);
         break;
      case 118:
         return jjMoveStringLiteralDfa2_0(active0, 0x8000L);
      case 120:
         return jjMoveStringLiteralDfa2_0(active0, 0x400L);
      case 121:
         return jjMoveStringLiteralDfa2_0(active0, 0x400000L);
      default :
         break;
   }
   return jjStartNfa_0(0, active0);
}
private final int jjMoveStringLiteralDfa2_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(0, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0);
      return 2;
   }
   switch(curChar)
   {
      case 83:
         if ((active0 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(2, 7, 78);
         break;
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0x2000L);
      case 99:
         return jjMoveStringLiteralDfa3_0(active0, 0x80000L);
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0x3008500L);
      case 102:
         return jjMoveStringLiteralDfa3_0(active0, 0x1000L);
      case 108:
         return jjMoveStringLiteralDfa3_0(active0, 0x4004000L);
      case 110:
         return jjMoveStringLiteralDfa3_0(active0, 0x400000L);
      case 114:
         return jjMoveStringLiteralDfa3_0(active0, 0x300000L);
      case 116:
         return jjMoveStringLiteralDfa3_0(active0, 0x20000L);
      case 118:
         return jjMoveStringLiteralDfa3_0(active0, 0x200L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0);
}
private final int jjMoveStringLiteralDfa3_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(1, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0);
      return 3;
   }
   switch(curChar)
   {
      case 66:
         return jjMoveStringLiteralDfa4_0(active0, 0x20000L);
      case 83:
         return jjMoveStringLiteralDfa4_0(active0, 0x4000L);
      case 98:
         return jjMoveStringLiteralDfa4_0(active0, 0x180000L);
      case 99:
         return jjMoveStringLiteralDfa4_0(active0, 0x400400L);
      case 101:
         return jjMoveStringLiteralDfa4_0(active0, 0x200000L);
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0x4000200L);
      case 110:
         return jjMoveStringLiteralDfa4_0(active0, 0x3008100L);
      case 114:
         return jjMoveStringLiteralDfa4_0(active0, 0x1000L);
      case 115:
         return jjMoveStringLiteralDfa4_0(active0, 0x2000L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0);
}
private final int jjMoveStringLiteralDfa4_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(2, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0);
      return 4;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa5_0(active0, 0x1000L);
      case 99:
         return jjMoveStringLiteralDfa5_0(active0, 0x200000L);
      case 101:
         return jjMoveStringLiteralDfa5_0(active0, 0x4020000L);
      case 104:
         return jjMoveStringLiteralDfa5_0(active0, 0x400000L);
      case 111:
         return jjMoveStringLiteralDfa5_0(active0, 0x104000L);
      case 112:
         if ((active0 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(4, 19, 90);
         break;
      case 114:
         return jjMoveStringLiteralDfa5_0(active0, 0x200L);
      case 115:
         return jjMoveStringLiteralDfa5_0(active0, 0x2000L);
      case 116:
         return jjMoveStringLiteralDfa5_0(active0, 0x3008100L);
      case 117:
         return jjMoveStringLiteralDfa5_0(active0, 0x400L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0);
}
private final int jjMoveStringLiteralDfa5_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(3, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0);
      return 5;
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa6_0(active0, 0x2000000L);
      case 67:
         return jjMoveStringLiteralDfa6_0(active0, 0x1000000L);
      case 102:
         return jjMoveStringLiteralDfa6_0(active0, 0x4000000L);
      case 108:
         return jjMoveStringLiteralDfa6_0(active0, 0x20000L);
      case 111:
         return jjMoveStringLiteralDfa6_0(active0, 0x200L);
      case 112:
         return jjMoveStringLiteralDfa6_0(active0, 0x2000L);
      case 114:
         return jjMoveStringLiteralDfa6_0(active0, 0x400000L);
      case 115:
         if ((active0 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(5, 8, 90);
         else if ((active0 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(5, 15, 90);
         return jjMoveStringLiteralDfa6_0(active0, 0x101000L);
      case 116:
         return jjMoveStringLiteralDfa6_0(active0, 0x200400L);
      case 117:
         return jjMoveStringLiteralDfa6_0(active0, 0x4000L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0);
}
private final int jjMoveStringLiteralDfa6_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(4, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0);
      return 6;
   }
   switch(curChar)
   {
      case 66:
         return jjMoveStringLiteralDfa7_0(active0, 0x4000000L);
      case 97:
         return jjMoveStringLiteralDfa7_0(active0, 0x2000L);
      case 101:
         if ((active0 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(6, 20, 90);
         break;
      case 105:
         return jjMoveStringLiteralDfa7_0(active0, 0x200400L);
      case 108:
         return jjMoveStringLiteralDfa7_0(active0, 0x1000000L);
      case 110:
         return jjMoveStringLiteralDfa7_0(active0, 0x200L);
      case 111:
         return jjMoveStringLiteralDfa7_0(active0, 0x400000L);
      case 114:
         return jjMoveStringLiteralDfa7_0(active0, 0x2004000L);
      case 115:
         if ((active0 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(6, 17, 90);
         break;
      case 116:
         return jjMoveStringLiteralDfa7_0(active0, 0x1000L);
      default :
         break;
   }
   return jjStartNfa_0(5, active0);
}
private final int jjMoveStringLiteralDfa7_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(5, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0);
      return 7;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa8_0(active0, 0x5000000L);
      case 99:
         return jjMoveStringLiteralDfa8_0(active0, 0x2004000L);
      case 109:
         return jjMoveStringLiteralDfa8_0(active0, 0x200L);
      case 110:
         return jjMoveStringLiteralDfa8_0(active0, 0x400000L);
      case 111:
         return jjMoveStringLiteralDfa8_0(active0, 0x400L);
      case 114:
         return jjMoveStringLiteralDfa8_0(active0, 0x1000L);
      case 116:
         return jjMoveStringLiteralDfa8_0(active0, 0x2000L);
      case 118:
         return jjMoveStringLiteralDfa8_0(active0, 0x200000L);
      default :
         break;
   }
   return jjStartNfa_0(6, active0);
}
private final int jjMoveStringLiteralDfa8_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(6, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0);
      return 8;
   }
   switch(curChar)
   {
      case 101:
         return jjMoveStringLiteralDfa9_0(active0, 0x204200L);
      case 104:
         if ((active0 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(8, 13, 90);
         return jjMoveStringLiteralDfa9_0(active0, 0x2000000L);
      case 105:
         return jjMoveStringLiteralDfa9_0(active0, 0x400000L);
      case 110:
         return jjMoveStringLiteralDfa9_0(active0, 0x400L);
      case 115:
         return jjMoveStringLiteralDfa9_0(active0, 0x5000000L);
      case 117:
         return jjMoveStringLiteralDfa9_0(active0, 0x1000L);
      default :
         break;
   }
   return jjStartNfa_0(7, active0);
}
private final int jjMoveStringLiteralDfa9_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(7, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0);
      return 9;
   }
   switch(curChar)
   {
      case 67:
         return jjMoveStringLiteralDfa10_0(active0, 0x2000400L);
      case 80:
         return jjMoveStringLiteralDfa10_0(active0, 0x4000L);
      case 99:
         return jjMoveStringLiteralDfa10_0(active0, 0x1000L);
      case 101:
         return jjMoveStringLiteralDfa10_0(active0, 0x4000000L);
      case 110:
         return jjMoveStringLiteralDfa10_0(active0, 0x200L);
      case 115:
         if ((active0 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(9, 21, 90);
         else if ((active0 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(9, 24, 90);
         return jjMoveStringLiteralDfa10_0(active0, 0x400000L);
      default :
         break;
   }
   return jjStartNfa_0(8, active0);
}
private final int jjMoveStringLiteralDfa10_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(8, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, active0);
      return 10;
   }
   switch(curChar)
   {
      case 67:
         return jjMoveStringLiteralDfa11_0(active0, 0x4000000L);
      case 97:
         return jjMoveStringLiteralDfa11_0(active0, 0x4000L);
      case 101:
         return jjMoveStringLiteralDfa11_0(active0, 0x400000L);
      case 108:
         return jjMoveStringLiteralDfa11_0(active0, 0x2000000L);
      case 111:
         return jjMoveStringLiteralDfa11_0(active0, 0x400L);
      case 116:
         if ((active0 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(10, 9, 90);
         return jjMoveStringLiteralDfa11_0(active0, 0x1000L);
      default :
         break;
   }
   return jjStartNfa_0(9, active0);
}
private final int jjMoveStringLiteralDfa11_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(9, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(10, active0);
      return 11;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa12_0(active0, 0x2000000L);
      case 100:
         if ((active0 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(11, 22, 90);
         break;
      case 108:
         return jjMoveStringLiteralDfa12_0(active0, 0x4000000L);
      case 110:
         return jjMoveStringLiteralDfa12_0(active0, 0x400L);
      case 116:
         return jjMoveStringLiteralDfa12_0(active0, 0x4000L);
      case 117:
         return jjMoveStringLiteralDfa12_0(active0, 0x1000L);
      default :
         break;
   }
   return jjStartNfa_0(10, active0);
}
private final int jjMoveStringLiteralDfa12_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(10, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(11, active0);
      return 12;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa13_0(active0, 0x4000000L);
      case 104:
         if ((active0 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(12, 14, 90);
         break;
      case 114:
         return jjMoveStringLiteralDfa13_0(active0, 0x1000L);
      case 115:
         return jjMoveStringLiteralDfa13_0(active0, 0x2000000L);
      case 116:
         return jjMoveStringLiteralDfa13_0(active0, 0x400L);
      default :
         break;
   }
   return jjStartNfa_0(11, active0);
}
private final int jjMoveStringLiteralDfa13_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(11, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(12, active0);
      return 13;
   }
   switch(curChar)
   {
      case 101:
         if ((active0 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(13, 12, 90);
         break;
      case 114:
         return jjMoveStringLiteralDfa14_0(active0, 0x400L);
      case 115:
         if ((active0 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(13, 25, 90);
         return jjMoveStringLiteralDfa14_0(active0, 0x4000000L);
      default :
         break;
   }
   return jjStartNfa_0(12, active0);
}
private final int jjMoveStringLiteralDfa14_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(12, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(13, active0);
      return 14;
   }
   switch(curChar)
   {
      case 111:
         return jjMoveStringLiteralDfa15_0(active0, 0x400L);
      case 115:
         if ((active0 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(14, 26, 90);
         break;
      default :
         break;
   }
   return jjStartNfa_0(13, active0);
}
private final int jjMoveStringLiteralDfa15_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(13, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(14, active0);
      return 15;
   }
   switch(curChar)
   {
      case 108:
         if ((active0 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(15, 10, 90);
         break;
      default :
         break;
   }
   return jjStartNfa_0(14, active0);
}
private final void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private final void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private final void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}
private final void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}
private final void jjCheckNAddStates(int start)
{
   jjCheckNAdd(jjnextStates[start]);
   jjCheckNAdd(jjnextStates[start + 1]);
}
static final long[] jjbitVec0 = {
   0xfffffffffffffffeL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec2 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
private final int jjMoveNfa_0(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 88;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 88:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 30)
                        kind = 30;
                     jjCheckNAdd(78);
                  }
                  else if (curChar == 58)
                  {
                     if (kind > 32)
                        kind = 32;
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 29)
                        kind = 29;
                     jjCheckNAdd(76);
                  }
                  else if (curChar == 58)
                  {
                     if (kind > 31)
                        kind = 31;
                     jjCheckNAddTwoStates(46, 47);
                  }
                  break;
               case 89:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 30)
                        kind = 30;
                     jjCheckNAdd(78);
                  }
                  else if (curChar == 58)
                  {
                     if (kind > 32)
                        kind = 32;
                  }
                  if (curChar == 58)
                  {
                     if (kind > 31)
                        kind = 31;
                     jjCheckNAddTwoStates(46, 47);
                  }
                  break;
               case 90:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 30)
                        kind = 30;
                     jjCheckNAdd(78);
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 29)
                        kind = 29;
                     jjCheckNAdd(76);
                  }
                  break;
               case 45:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 27)
                        kind = 27;
                     jjCheckNAddTwoStates(32, 33);
                  }
                  else if (curChar == 47)
                  {
                     if (kind > 31)
                        kind = 31;
                     jjCheckNAddTwoStates(46, 47);
                  }
                  break;
               case 4:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 30)
                        kind = 30;
                     jjCheckNAdd(78);
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 29)
                        kind = 29;
                     jjCheckNAdd(76);
                  }
                  break;
               case 14:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 30)
                        kind = 30;
                     jjCheckNAdd(78);
                  }
                  else if (curChar == 58)
                  {
                     if (kind > 32)
                        kind = 32;
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 29)
                        kind = 29;
                     jjCheckNAdd(76);
                  }
                  else if (curChar == 58)
                  {
                     if (kind > 31)
                        kind = 31;
                     jjCheckNAddTwoStates(46, 47);
                  }
                  break;
               case 5:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 30)
                        kind = 30;
                     jjCheckNAdd(78);
                  }
                  else if (curChar == 58)
                  {
                     if (kind > 32)
                        kind = 32;
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 29)
                        kind = 29;
                     jjCheckNAdd(76);
                  }
                  else if (curChar == 58)
                  {
                     if (kind > 31)
                        kind = 31;
                     jjCheckNAddTwoStates(46, 47);
                  }
                  break;
               case 6:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 27)
                        kind = 27;
                     jjCheckNAddStates(0, 4);
                  }
                  else if (curChar == 47)
                     jjAddStates(5, 6);
                  else if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 45;
                  else if (curChar == 34)
                     jjCheckNAddStates(7, 9);
                  if (curChar == 47)
                  {
                     if (kind > 31)
                        kind = 31;
                     jjCheckNAddTwoStates(46, 47);
                  }
                  else if (curChar == 46)
                     jjCheckNAdd(32);
                  break;
               case 21:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 30)
                        kind = 30;
                     jjCheckNAdd(78);
                  }
                  else if (curChar == 58)
                  {
                     if (kind > 32)
                        kind = 32;
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 29)
                        kind = 29;
                     jjCheckNAdd(76);
                  }
                  else if (curChar == 58)
                  {
                     if (kind > 31)
                        kind = 31;
                     jjCheckNAddTwoStates(46, 47);
                  }
                  break;
               case 31:
                  if (curChar == 46)
                     jjCheckNAdd(32);
                  break;
               case 32:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 27)
                     kind = 27;
                  jjCheckNAddTwoStates(32, 33);
                  break;
               case 34:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(35);
                  break;
               case 35:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 27)
                     kind = 27;
                  jjCheckNAdd(35);
                  break;
               case 36:
                  if (curChar == 34)
                     jjCheckNAddStates(7, 9);
                  break;
               case 37:
                  if ((0xfffffffbffffdbffL & l) != 0L)
                     jjCheckNAddStates(7, 9);
                  break;
               case 39:
                  if ((0x8400000000L & l) != 0L)
                     jjCheckNAddStates(7, 9);
                  break;
               case 40:
                  if (curChar == 34 && kind > 28)
                     kind = 28;
                  break;
               case 41:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(10, 13);
                  break;
               case 42:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(7, 9);
                  break;
               case 43:
                  if ((0xf000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 44;
                  break;
               case 44:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAdd(42);
                  break;
               case 46:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(46, 47);
                  break;
               case 47:
                  if (curChar != 47)
                     break;
                  if (kind > 31)
                     kind = 31;
                  jjCheckNAddTwoStates(46, 47);
                  break;
               case 48:
                  if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 45;
                  break;
               case 63:
                  if (curChar == 47)
                     jjAddStates(5, 6);
                  break;
               case 64:
                  if (curChar != 47)
                     break;
                  if (kind > 5)
                     kind = 5;
                  jjCheckNAddStates(14, 16);
                  break;
               case 65:
                  if ((0xffffffffffffdbffL & l) == 0L)
                     break;
                  if (kind > 5)
                     kind = 5;
                  jjCheckNAddStates(14, 16);
                  break;
               case 66:
                  if ((0x2400L & l) != 0L && kind > 5)
                     kind = 5;
                  break;
               case 67:
                  if (curChar == 10 && kind > 5)
                     kind = 5;
                  break;
               case 68:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 67;
                  break;
               case 69:
                  if (curChar == 42)
                     jjCheckNAddTwoStates(70, 71);
                  break;
               case 70:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(70, 71);
                  break;
               case 71:
                  if (curChar == 42)
                     jjCheckNAddStates(17, 19);
                  break;
               case 72:
                  if ((0xffff7bffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(73, 71);
                  break;
               case 73:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(73, 71);
                  break;
               case 74:
                  if (curChar == 47 && kind > 6)
                     kind = 6;
                  break;
               case 76:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 29)
                     kind = 29;
                  jjCheckNAdd(76);
                  break;
               case 78:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 30)
                     kind = 30;
                  jjCheckNAdd(78);
                  break;
               case 79:
                  if (curChar != 58)
                     break;
                  if (kind > 31)
                     kind = 31;
                  jjCheckNAddTwoStates(46, 47);
                  break;
               case 80:
                  if (curChar == 58 && kind > 32)
                     kind = 32;
                  break;
               case 81:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 27)
                     kind = 27;
                  jjCheckNAddStates(0, 4);
                  break;
               case 82:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 27)
                     kind = 27;
                  jjCheckNAdd(82);
                  break;
               case 83:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(83, 31);
                  break;
               case 84:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(84, 85);
                  break;
               case 86:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(87);
                  break;
               case 87:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 27)
                     kind = 27;
                  jjCheckNAdd(87);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 88:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 30)
                        kind = 30;
                     jjCheckNAdd(78);
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 29)
                        kind = 29;
                     jjCheckNAdd(76);
                  }
                  break;
               case 89:
               case 78:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 30)
                     kind = 30;
                  jjCheckNAdd(78);
                  break;
               case 90:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 30)
                        kind = 30;
                     jjCheckNAdd(78);
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 29)
                        kind = 29;
                     jjCheckNAdd(76);
                  }
                  break;
               case 4:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 30)
                        kind = 30;
                     jjCheckNAdd(78);
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 29)
                        kind = 29;
                     jjCheckNAdd(76);
                  }
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 14:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 30)
                        kind = 30;
                     jjCheckNAdd(78);
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 29)
                        kind = 29;
                     jjCheckNAdd(76);
                  }
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 13;
                  break;
               case 5:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 30)
                        kind = 30;
                     jjCheckNAdd(78);
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 29)
                        kind = 29;
                     jjCheckNAdd(76);
                  }
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 4;
                  break;
               case 6:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 30)
                        kind = 30;
                     jjCheckNAddStates(20, 22);
                  }
                  else if (curChar == 92)
                  {
                     if (kind > 31)
                        kind = 31;
                     jjCheckNAddTwoStates(46, 47);
                  }
                  if ((0x7fffffe00000000L & l) != 0L)
                  {
                     if (kind > 29)
                        kind = 29;
                     jjCheckNAdd(76);
                  }
                  else if ((0x7fffffeL & l) != 0L)
                  {
                     if (kind > 35)
                        kind = 35;
                  }
                  if (curChar == 114)
                     jjAddStates(23, 24);
                  else if (curChar == 102)
                     jjstateSet[jjnewStateCnt++] = 29;
                  else if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 25;
                  else if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 21;
                  else if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 14;
                  else if (curChar == 100)
                     jjstateSet[jjnewStateCnt++] = 5;
                  break;
               case 21:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 30)
                        kind = 30;
                     jjCheckNAdd(78);
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 29)
                        kind = 29;
                     jjCheckNAdd(76);
                  }
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 20;
                  break;
               case 0:
                  if (curChar == 100 && kind > 16)
                     kind = 16;
                  break;
               case 1:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 0;
                  break;
               case 2:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 3:
                  if (curChar == 99)
                     jjstateSet[jjnewStateCnt++] = 2;
                  break;
               case 7:
                  if (curChar == 115 && kind > 18)
                     kind = 18;
                  break;
               case 8:
               case 16:
                  if (curChar == 117)
                     jjCheckNAdd(7);
                  break;
               case 9:
                  if (curChar == 99)
                     jjstateSet[jjnewStateCnt++] = 8;
                  break;
               case 10:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 9;
                  break;
               case 11:
                  if (curChar == 70)
                     jjstateSet[jjnewStateCnt++] = 10;
                  break;
               case 12:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 11;
                  break;
               case 13:
                  if (curChar == 109)
                     jjstateSet[jjnewStateCnt++] = 12;
                  break;
               case 15:
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 14;
                  break;
               case 17:
                  if (curChar == 99)
                     jjstateSet[jjnewStateCnt++] = 16;
                  break;
               case 18:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 17;
                  break;
               case 19:
                  if (curChar == 70)
                     jjstateSet[jjnewStateCnt++] = 18;
                  break;
               case 20:
                  if (curChar == 119)
                     jjstateSet[jjnewStateCnt++] = 19;
                  break;
               case 22:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 21;
                  break;
               case 23:
                  if (curChar == 101 && kind > 23)
                     kind = 23;
                  break;
               case 24:
                  if (curChar == 117)
                     jjCheckNAdd(23);
                  break;
               case 25:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 24;
                  break;
               case 26:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 25;
                  break;
               case 27:
                  if (curChar == 115)
                     jjCheckNAdd(23);
                  break;
               case 28:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 27;
                  break;
               case 29:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 28;
                  break;
               case 30:
                  if (curChar == 102)
                     jjstateSet[jjnewStateCnt++] = 29;
                  break;
               case 33:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(25, 26);
                  break;
               case 37:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(7, 9);
                  break;
               case 38:
                  if (curChar == 92)
                     jjAddStates(27, 29);
                  break;
               case 39:
                  if ((0x14404410000000L & l) != 0L)
                     jjCheckNAddStates(7, 9);
                  break;
               case 46:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(46, 47);
                  break;
               case 47:
                  if (curChar != 92)
                     break;
                  if (kind > 31)
                     kind = 31;
                  jjCheckNAddTwoStates(46, 47);
                  break;
               case 49:
                  if ((0x7fffffeL & l) != 0L && kind > 35)
                     kind = 35;
                  break;
               case 50:
                  if (curChar == 114)
                     jjAddStates(23, 24);
                  break;
               case 51:
                  if (curChar == 101 && kind > 16)
                     kind = 16;
                  break;
               case 52:
                  if (curChar == 117)
                     jjCheckNAdd(51);
                  break;
               case 53:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 52;
                  break;
               case 54:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 53;
                  break;
               case 55:
                  if (curChar == 113)
                     jjstateSet[jjnewStateCnt++] = 54;
                  break;
               case 56:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 55;
                  break;
               case 57:
                  if (curChar == 118)
                     jjCheckNAdd(51);
                  break;
               case 58:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 57;
                  break;
               case 59:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 58;
                  break;
               case 60:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 59;
                  break;
               case 61:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 60;
                  break;
               case 62:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 61;
                  break;
               case 65:
                  if (kind > 5)
                     kind = 5;
                  jjAddStates(14, 16);
                  break;
               case 70:
                  jjCheckNAddTwoStates(70, 71);
                  break;
               case 72:
               case 73:
                  jjCheckNAddTwoStates(73, 71);
                  break;
               case 75:
                  if ((0x7fffffe00000000L & l) == 0L)
                     break;
                  if (kind > 29)
                     kind = 29;
                  jjCheckNAdd(76);
                  break;
               case 76:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 29)
                     kind = 29;
                  jjCheckNAdd(76);
                  break;
               case 77:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 30)
                     kind = 30;
                  jjCheckNAddStates(20, 22);
                  break;
               case 85:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(30, 31);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 37:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(7, 9);
                  break;
               case 65:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 5)
                     kind = 5;
                  jjAddStates(14, 16);
                  break;
               case 70:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(70, 71);
                  break;
               case 72:
               case 73:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(73, 71);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 88 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   82, 83, 31, 84, 85, 64, 69, 37, 38, 40, 37, 38, 42, 40, 65, 66, 
   68, 71, 72, 74, 78, 79, 80, 56, 62, 34, 35, 39, 41, 43, 86, 87, 
};
private static final boolean jjCanMove_0(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec2[i2] & l2) != 0L);
      default : 
         if ((jjbitVec0[i1] & l1) != 0L)
            return true;
         return false;
   }
}
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, "\115\101\123", 
"\141\147\145\156\164\163", "\145\156\166\151\162\157\156\155\145\156\164", 
"\145\170\145\143\165\164\151\157\156\103\157\156\164\162\157\154", "\141\164", "\151\156\146\162\141\163\164\162\165\143\164\165\162\145", 
"\143\154\141\163\163\160\141\164\150", "\141\163\154\123\157\165\162\143\145\120\141\164\150", 
"\145\166\145\156\164\163", null, "\151\156\164\102\145\154\163", null, "\156\162\143\142\160", 
"\166\145\162\142\157\163\145", "\144\151\162\145\143\164\151\166\145\163", 
"\163\171\156\143\150\162\157\156\151\163\145\144", null, "\141\147\145\156\164\103\154\141\163\163", 
"\141\147\145\156\164\101\162\143\150\103\154\141\163\163", "\142\145\154\151\145\146\102\141\163\145\103\154\141\163\163", null, null, 
null, null, null, null, null, null, null, null, "\173", "\175", "\72", "\43", "\73", 
"\56", "\50", "\54", "\51", "\133", "\135", "\75", };
public static final String[] lexStateNames = {
   "DEFAULT", 
};
static final long[] jjtoToken = {
   0x1ffffffffff81L, 
};
static final long[] jjtoSkip = {
   0x7eL, 
};
protected SimpleCharStream input_stream;
private final int[] jjrounds = new int[88];
private final int[] jjstateSet = new int[176];
protected char curChar;
public mas2jTokenManager(SimpleCharStream stream){
   if (SimpleCharStream.staticFlag)
      throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
   input_stream = stream;
}
public mas2jTokenManager(SimpleCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}
public void ReInit(SimpleCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private final void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 88; i-- > 0;)
      jjrounds[i] = 0x80000000;
}
public void ReInit(SimpleCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}
public void SwitchTo(int lexState)
{
   if (lexState >= 1 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

protected Token jjFillToken()
{
   Token t = Token.newToken(jjmatchedKind);
   t.kind = jjmatchedKind;
   String im = jjstrLiteralImages[jjmatchedKind];
   t.image = (im == null) ? input_stream.GetImage() : im;
   t.beginLine = input_stream.getBeginLine();
   t.beginColumn = input_stream.getBeginColumn();
   t.endLine = input_stream.getEndLine();
   t.endColumn = input_stream.getEndColumn();
   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

public Token getNextToken() 
{
  int kind;
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {   
   try   
   {     
      curChar = input_stream.BeginToken();
   }     
   catch(java.io.IOException e)
   {        
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      return matchedToken;
   }

   try { input_stream.backup(0);
      while (curChar <= 32 && (0x100002600L & (1L << curChar)) != 0L)
         curChar = input_stream.BeginToken();
   }
   catch (java.io.IOException e1) { continue EOFLoop; }
   jjmatchedKind = 0x7fffffff;
   jjmatchedPos = 0;
   curPos = jjMoveStringLiteralDfa0_0();
   if (jjmatchedKind != 0x7fffffff)
   {
      if (jjmatchedPos + 1 < curPos)
         input_stream.backup(curPos - jjmatchedPos - 1);
      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
      {
         matchedToken = jjFillToken();
         return matchedToken;
      }
      else
      {
         continue EOFLoop;
      }
   }
   int error_line = input_stream.getEndLine();
   int error_column = input_stream.getEndColumn();
   String error_after = null;
   boolean EOFSeen = false;
   try { input_stream.readChar(); input_stream.backup(1); }
   catch (java.io.IOException e1) {
      EOFSeen = true;
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
      if (curChar == '\n' || curChar == '\r') {
         error_line++;
         error_column = 0;
      }
      else
         error_column++;
   }
   if (!EOFSeen) {
      input_stream.backup(1);
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
   }
   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

}
