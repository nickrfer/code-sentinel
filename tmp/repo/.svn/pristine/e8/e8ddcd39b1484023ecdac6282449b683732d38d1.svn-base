/* Generated By:JavaCC: Do not edit this line. as2j.java */
  package jason.asSyntax.parser;

  import java.util.*;
  import java.io.*;
  import java.util.logging.*;

  import jason.*;
  import jason.asSemantics.*;
  import jason.bb.*;
  import jason.asSyntax.*;
  import jason.asSyntax.directives.*;
  import jason.asSyntax.ArithExpr.ArithmeticOp;
  import jason.asSyntax.LogExpr.LogicalOp;
  import jason.asSyntax.RelExpr.RelationalOp;
  import jason.asSyntax.PlanBody.BodyType;
  import jason.asSyntax.Trigger.TEOperator;
  import jason.asSyntax.Trigger.TEType;
  import jason.util.*;

  public class as2j implements as2jConstants {
    private String    asSource = null;
    private Agent     curAg    = null;

    private Atom      namespace     = Literal.DefaultNS;
    private Atom      thisnamespace = Literal.DefaultNS;

    private DirectiveProcessor directiveProcessor = new DirectiveProcessor();
    private NameSpace nsDirective = (NameSpace)directiveProcessor.getInstance("namespace");

    private static Logger logger = Logger.getLogger("aslparser");
    private static Set<String> parsedFiles = new HashSet<String>();
    private static Config config = Config.get(false);

    public void setAg(Agent ag) { curAg = ag; }
    public void setNS(Atom  ns) { namespace = ns; thisnamespace = ns; }
    public Atom getNS()         { return namespace; }

    private String getSourceRef(SourceInfo s) {
        if (s == null)
            return "[]";
        else
            return "["+s.getSrcFile()+":"+s.getBeginSrcLine()+"]";
    }
    private String getSourceRef(DefaultTerm t) {
        return getSourceRef( t.getSrcInfo());
    }
    private String getSourceRef(Object t) {
        if (t instanceof DefaultTerm)
            return getSourceRef((DefaultTerm)t);
        else if (t instanceof SourceInfo)
            return getSourceRef((SourceInfo)t);
        else
            return "[]";
    }

        private InternalActionLiteral checkInternalActionsInContext(LogicalFormula f, Agent ag) throws Exception {
            if (f != null) {
                if (f instanceof InternalActionLiteral) {
                    InternalActionLiteral ial = (InternalActionLiteral)f;
                    if (! ial.getIA(ag).canBeUsedInContext())
                       return ial;
                } else if (f instanceof LogExpr) {
                    LogExpr le = (LogExpr)f;
                    InternalActionLiteral ial = checkInternalActionsInContext(le.getLHS(), ag);
                    if (ial != null)
                        return ial;
                    if (!le.isUnary())
                        return checkInternalActionsInContext(le.getRHS(), ag);
                }
        }
        return null;
    }

    private ArithFunction getArithFunction(Literal l) {
        ArithFunction af = null;
        if (curAg != null)
           // try to find the function in agent register
           af = curAg.getFunction(l.getFunctor(), l.getArity());
        if (af == null)
           // try global function
           af = FunctionRegister.getFunction(l.getFunctor(), l.getArity());
        return af;
    }

    private Term changeToAtom(Object o) {
        Term u = (Term)o;
        if (u == Literal.LTrue)
            return u;
        if (u == Literal.LFalse)
            return u;
        if (u.isAtom()) {
           if (((Atom)u).getFunctor().equals("default"))
              return Literal.DefaultNS;
           else if (((Atom)u).getFunctor().equals("this_ns"))
              return thisnamespace;
           else
              return new Atom((Literal)u);
        }
        return u;
    }

/* AgentSpeak Grammar */

/*   agent ::= bels goals plans

     returns true if achieved the end of file
     returns false if achieved a "{ end }" directive  
*/
  final public boolean agent(Agent a) throws ParseException, jason.JasonException {
                                Literal b;
                                Literal g;
                                Plan    p;
                                curAg = a;
                                if (a != null && a.getASLSrc() != null) asSource = a.getASLSrc();
                                boolean endDir = false;
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 32:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      endDir = directive(a);
                                if (endDir) {if (true) return false;}
    }
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case VAR:
      case TK_TRUE:
      case TK_FALSE:
      case TK_NEG:
      case TK_BEGIN:
      case TK_END:
      case ATOM:
      case UNNAMEDVAR:
      case 49:
        ;
        break;
      default:
        jj_la1[1] = jj_gen;
        break label_2;
      }
      b = belief();
                                if (a != null) a.addInitialBel(b);
      label_3:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 32:
          ;
          break;
        default:
          jj_la1[2] = jj_gen;
          break label_3;
        }
        endDir = directive(a);
                                if (endDir) {if (true) return false;}
      }
    }
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 36:
        ;
        break;
      default:
        jj_la1[3] = jj_gen;
        break label_4;
      }
      g = initial_goal();
                                if (a != null) a.addInitialGoal(g);
      label_5:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 32:
          ;
          break;
        default:
          jj_la1[4] = jj_gen;
          break label_5;
        }
        endDir = directive(a);
                                if (endDir) {if (true) return false;}
      }
    }
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TK_LABEL_AT:
      case 39:
      case 40:
      case 41:
        ;
        break;
      default:
        jj_la1[5] = jj_gen;
        break label_6;
      }
      p = plan();
                                if (a != null) {
                                   a.getPL().add(p);
                                   // warning only not parsed files
                                   if (config.getBoolean(Config.WARN_SING_VAR) && !parsedFiles.contains(asSource)) {
                                      List<VarTerm> singletonVars = p.getSingletonVars();
                                      if (singletonVars.size() > 0) {
                                         logger.warning(getSourceRef(p.getSrcInfo())+" warning: the plan for event '"+p.getTrigger()+"' has the following singleton variables: "+singletonVars);
                                      }
                                   }
                                }
      label_7:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case VAR:
        case TK_TRUE:
        case TK_FALSE:
        case TK_NEG:
        case TK_BEGIN:
        case TK_END:
        case ATOM:
        case UNNAMEDVAR:
        case 49:
          ;
          break;
        default:
          jj_la1[6] = jj_gen;
          break label_7;
        }
        b = belief();
                                if (a != null) {
                                  if (b.isRule()) {
                                      a.addInitialBel(b);
                                      //if (!parsedFiles.contains(asSource))
                                      //   logger.warning(getSourceRef(b)+" warning: avoid to mix rules and plans ('"+b+"').");
                                  } else {
                                      {if (true) throw new ParseException(getSourceRef(b)+" The belief '"+b+"' is not in the begin of the source code!");}
                                  }
                                }
      }
      label_8:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 32:
          ;
          break;
        default:
          jj_la1[7] = jj_gen;
          break label_8;
        }
        endDir = directive(a);
                                if (endDir) {if (true) return false;}
      }
    }
    jj_consume_token(0);
                                if (a != null) parsedFiles.add(a.getASLSrc());
                                {if (true) return true;}
    throw new Error("Missing return statement in function");
  }

/* Directive 

   returns true if the directive is "{ end }", false otherwise
*/
  final public boolean directive(Agent outerAg) throws ParseException, jason.JasonException {
                                Pred dir = null;
                                Agent resultOfDirective = null;
                                Agent bakAg = curAg;
                                boolean isEOF = false;
                                Atom oldNS = null;
    jj_consume_token(32);
    if (jj_2_1(4)) {
      jj_consume_token(TK_BEGIN);
      dir = pred();
      jj_consume_token(33);
                                Agent innerAg = new Agent(); innerAg.initAg();
                                dir = new Pred(namespace, dir);
                                Directive d = directiveProcessor.getInstance(dir);
                                d.begin(dir,this);
      isEOF = agent(innerAg);
                                if (isEOF)
                                   {if (true) throw new ParseException(getSourceRef(dir)+" The directive '{ begin "+dir+"}' does not end with '{ end }'.");}

                                resultOfDirective = d.process(dir, outerAg, innerAg);
                                d.end(dir,this);
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TK_BEGIN:
      case TK_END:
      case ATOM:
        dir = pred();
        jj_consume_token(33);
                                if (dir.toString().equals("end"))
                                   {if (true) return true;}
                                dir = new Pred(namespace, dir);
                                Directive d = directiveProcessor.getInstance(dir);
                                d.begin(dir, this); // to declare the namespace as local
                                resultOfDirective = d.process(dir, outerAg, null);
                                d.end(dir, this);
        break;
      default:
        jj_la1[8] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
                                if (resultOfDirective != null && outerAg != null) {
                                  // import bels, plans and initial goals from agent resultOfDirective
                                  outerAg.importComponents(resultOfDirective);
                                }
                                curAg = bakAg;
                                {if (true) return false;}
    throw new Error("Missing return statement in function");
  }

/* Beliefs & Rules */
  final public Literal belief() throws ParseException {
                     Literal h; Object t;
    h = literal();
                               if (h.isVar()) {
                                  {if (true) throw new ParseException(getSourceRef(h)+" variables cannot be beliefs!");}
                               }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 34:
      jj_consume_token(34);
      t = log_expr();
                               h = new Rule(h,(LogicalFormula)t);
                               // warning only not parsed files
                               if (config.getBoolean(Config.WARN_SING_VAR) && !parsedFiles.contains(asSource)) {
                                  List<VarTerm> singletonVars = h.getSingletonVars();
                                  if (singletonVars.size() > 0) {
                                     logger.warning(getSourceRef(h)+" warning: the rule with head '"+((Rule)h).headClone()+"' has the following singleton variables: "+singletonVars);
                                  }
                               }
      break;
    default:
      jj_la1[9] = jj_gen;
      ;
    }
    jj_consume_token(35);
                               {if (true) return h;}
    throw new Error("Missing return statement in function");
  }

/* Initial goals */
  final public Literal initial_goal() throws ParseException {
                           Literal g;
    jj_consume_token(36);
    g = literal();
    jj_consume_token(35);
                           if (g.isVar()) {
                                  {if (true) throw new ParseException(getSourceRef(g)+". a variable cannot be a goal!");}
                           }
                           {if (true) return g;}
    throw new Error("Missing return statement in function");
  }

/* Plan */
  final public Plan plan() throws ParseException {
                        Token k;
                        Pred L = null; Literal L2;
                        Trigger T;
                        Object C = null;
                        PlanBody B = null;
                        int start = -1, end;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TK_LABEL_AT:
      k = jj_consume_token(TK_LABEL_AT);
      L2 = literal();
                                        start = k.beginLine; L = new Pred(L2);
      break;
    default:
      jj_la1[10] = jj_gen;
      ;
    }
    // use literal to allow namespace
        T = trigger();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 37:
      k = jj_consume_token(37);
      C = log_expr();
                                   if (start == -1) start = k.beginLine;
      break;
    default:
      jj_la1[11] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 38:
      k = jj_consume_token(38);
      B = plan_body();
                                   if (start == -1) start = k.beginLine;
      break;
    default:
      jj_la1[12] = jj_gen;
      ;
    }
    k = jj_consume_token(35);
                                   if (start == -1) start = k.beginLine;
                     end = k.beginLine;
                     InternalActionLiteral ial = null;
                     try { ial = checkInternalActionsInContext((LogicalFormula)C, curAg); } catch (Exception e) {}
                     if (ial != null)
                        {if (true) throw new ParseException(getSourceRef(ial)+" The internal action '"+ial+"' can not be used in plan's context!");}
                         if (B != null && B.getBodyTerm().equals(Literal.LTrue))
                            B = (PlanBody)B.getBodyNext();
                     Plan p = new Plan(L,T,(LogicalFormula)C, B);
                     p.setSrcInfo(new SourceInfo(asSource,start,end));
                     {if (true) return p;}
    throw new Error("Missing return statement in function");
  }

/* Trigger */
  final public Trigger trigger() throws ParseException {
                        TEOperator teOp;
                                TEType     teType = TEType.belief;
                                        Literal F;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 39:
      jj_consume_token(39);
                 teOp = TEOperator.add;
      break;
    case 40:
      jj_consume_token(40);
                 teOp = TEOperator.del;
      break;
    case 41:
      jj_consume_token(41);
                 teOp = TEOperator.goalState;
      break;
    default:
      jj_la1[13] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 36:
    case 42:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 36:
        jj_consume_token(36);
                 teType = TEType.achieve;
        break;
      case 42:
        jj_consume_token(42);
                 teType = TEType.test;
        break;
      default:
        jj_la1[14] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[15] = jj_gen;
      ;
    }
    F = literal();
                 {if (true) return new Trigger(teOp,teType,F);}
    throw new Error("Missing return statement in function");
  }

/* Plan body */
  final public PlanBody plan_body() throws ParseException {
                              Object F; PlanBody R = null;
    F = plan_body_term();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 43:
      jj_consume_token(43);
      break;
    default:
      jj_la1[16] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case VAR:
    case TK_TRUE:
    case TK_FALSE:
    case TK_NOT:
    case TK_NEG:
    case TK_BEGIN:
    case TK_END:
    case TK_IF:
    case TK_FOR:
    case TK_WHILE:
    case NUMBER:
    case STRING:
    case ATOM:
    case UNNAMEDVAR:
    case 32:
    case 36:
    case 39:
    case 40:
    case 42:
    case 44:
    case 46:
    case 49:
      R = plan_body();
      break;
    default:
      jj_la1[17] = jj_gen;
      ;
    }
                              if (R != null) {
                                ((PlanBody)F).setBodyNext( R );
                              }
                              {if (true) return (PlanBody)F;}
    throw new Error("Missing return statement in function");
  }

  final public PlanBody plan_body_term() throws ParseException {
                              Object F; PlanBody R = null;
    F = plan_body_factor();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TK_POR:
      jj_consume_token(TK_POR);
      R = plan_body_term();
      break;
    default:
      jj_la1[18] = jj_gen;
      ;
    }
                               if (R == null)
                                  {if (true) return (PlanBody)F;}
                               try {
                                  Structure s = ASSyntax.createStructure(".fork", jason.stdlib.fork.aOr, (Term)F);
                                  if (R.toString().startsWith(".fork(or,")) {
                                     // if R is another fork or, put they args into this fork
                                     InternalActionLiteral ial = (InternalActionLiteral)R.getBodyTerm();
                                     if (ial.getIA(curAg) instanceof jason.stdlib.fork) {
                                        for (int i=1; i<ial.getArity(); i++) {
                                           s.addTerm(ial.getTerm(i));
                                        }
                                     }
                                  } else {
                                     s.addTerm(R);
                                  }

                                  Literal stmtLiteral = new InternalActionLiteral(s, curAg);
                                  stmtLiteral.setSrcInfo( ((Term)F).getSrcInfo() );
                                  {if (true) return new PlanBodyImpl(BodyType.internalAction, stmtLiteral);}
                               } catch (Exception e) {
                                  e.printStackTrace();
                               }
    throw new Error("Missing return statement in function");
  }

  final public PlanBody plan_body_factor() throws ParseException {
                                Object F; PlanBody R = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TK_IF:
      F = stmtIF();
      break;
    case TK_FOR:
      F = stmtFOR();
      break;
    case TK_WHILE:
      F = stmtWHILE();
      break;
    case VAR:
    case TK_TRUE:
    case TK_FALSE:
    case TK_NOT:
    case TK_NEG:
    case TK_BEGIN:
    case TK_END:
    case NUMBER:
    case STRING:
    case ATOM:
    case UNNAMEDVAR:
    case 32:
    case 36:
    case 39:
    case 40:
    case 42:
    case 44:
    case 46:
    case 49:
      F = body_formula();
                                                        //isControl = false; 
                                                        if (!(F instanceof PlanBody)) {if (true) throw new ParseException(getSourceRef(F)+" "+F+" is not a body literal!");}
      break;
    default:
      jj_la1[19] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TK_PAND:
      jj_consume_token(TK_PAND);
      R = plan_body_factor();
      break;
    default:
      jj_la1[20] = jj_gen;
      ;
    }
                               if (R == null)
                                  {if (true) return (PlanBody)F;}
                               try {
                                  Structure s = ASSyntax.createStructure(".fork", jason.stdlib.fork.aAnd, (Term)F);
                                  if (R.toString().startsWith(".fork(and,")) {
                                     // if R is another fork and, put they args into this fork
                                     InternalActionLiteral ial = (InternalActionLiteral)R.getBodyTerm();
                                     if (ial.getIA(curAg) instanceof jason.stdlib.fork) {
                                        for (int i=1; i<ial.getArity(); i++) {
                                           s.addTerm(ial.getTerm(i));
                                        }
                                     }
                                  } else {
                                     s.addTerm(R);
                                  }
                                  Literal stmtLiteral = new InternalActionLiteral(s, curAg);
                                  stmtLiteral.setSrcInfo( ((Term)F).getSrcInfo() );
                                  {if (true) return new PlanBodyImpl(BodyType.internalAction, stmtLiteral);}
                               } catch (Exception e) {
                                  e.printStackTrace();
                               }
    throw new Error("Missing return statement in function");
  }

  final public PlanBody stmtIF() throws ParseException {
                         Object B; Term T1; Term T2 = null; Literal stmtLiteral; boolean useElse = false;
    jj_consume_token(TK_IF);
    jj_consume_token(44);
    B = log_expr();
    jj_consume_token(45);
    T1 = rule_plan_term();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TK_ELSE:
    case 32:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TK_ELSE:
        jj_consume_token(TK_ELSE);
                         useElse = true;
        break;
      default:
        jj_la1[21] = jj_gen;
        ;
      }
      T2 = rule_plan_term();
      break;
    default:
      jj_la1[22] = jj_gen;
      ;
    }
                         try {
                            if (T1.isRule()) {
                               {if (true) throw new ParseException(getSourceRef(T1)+" if requires a plan body.");}
                            }
                            if (T2 == null) {
                                stmtLiteral = new InternalActionLiteral(ASSyntax.createStructure(".if_then_else", (Term)B, T1), curAg);
                                stmtLiteral.setSrcInfo( ((Term)B).getSrcInfo() );
                            } else {
                                if (T2.isRule()) {
                                  {if (true) throw new ParseException(getSourceRef(T2)+" if (else) requires a plan body.");}
                                }
                                stmtLiteral = new InternalActionLiteral(ASSyntax.createStructure(".if_then_else", (Term)B, T1, T2), curAg);
                                stmtLiteral.setSrcInfo( ((Term)B).getSrcInfo() );
                                if (! useElse) {
                                   logger.warning(getSourceRef(stmtLiteral)+" warning: use keyword 'else' before the else part of if.");
                                }
                            }
                            {if (true) return new PlanBodyImpl(BodyType.internalAction, stmtLiteral);}
                         } catch (Exception e) {
                            e.printStackTrace();
                         }
    throw new Error("Missing return statement in function");
  }

  final public PlanBody stmtFOR() throws ParseException {
                         Object B; Term T1; Literal stmtLiteral;
    jj_consume_token(TK_FOR);
    jj_consume_token(44);
    B = log_expr();
    jj_consume_token(45);
    T1 = rule_plan_term();
                         try {
                            if (T1.isRule()) {
                               {if (true) throw new ParseException(getSourceRef(T1)+"for requires a plan body.");}
                            }
                            stmtLiteral = new InternalActionLiteral(ASSyntax.createStructure(".foreach", (Term)B, T1), curAg);
                            stmtLiteral.setSrcInfo( ((Term)B).getSrcInfo() );
                            {if (true) return new PlanBodyImpl(BodyType.internalAction, stmtLiteral);}
                         } catch (Exception e) {
                            e.printStackTrace();
                         }
    throw new Error("Missing return statement in function");
  }

  final public PlanBody stmtWHILE() throws ParseException {
                         Object B; Term T1; Literal stmtLiteral;
    jj_consume_token(TK_WHILE);
    jj_consume_token(44);
    B = log_expr();
    jj_consume_token(45);
    T1 = rule_plan_term();
                         try {
                            if (T1.isRule()) {
                               {if (true) throw new ParseException(getSourceRef(T1)+"while requires a plan body.");}
                            }
                            stmtLiteral = new InternalActionLiteral(ASSyntax.createStructure(".loop", (Term)B, T1), curAg);
                            stmtLiteral.setSrcInfo( ((Term)B).getSrcInfo() );
                            {if (true) return new PlanBodyImpl(BodyType.internalAction, stmtLiteral);}
                         } catch (Exception e) {
                            e.printStackTrace();
                         }
    throw new Error("Missing return statement in function");
  }

  final public Object body_formula() throws ParseException {
                         BodyType formType = BodyType.action;  Object B;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 36:
    case 39:
    case 40:
    case 42:
    case 46:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 36:
        jj_consume_token(36);
                         formType = BodyType.achieve;
        break;
      case 46:
        jj_consume_token(46);
                         formType = BodyType.achieveNF;
        break;
      case 42:
        jj_consume_token(42);
                         formType = BodyType.test;
        break;
      case 39:
        jj_consume_token(39);
                         formType = BodyType.addBel;
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 39:
        case 47:
        case 48:
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case 39:
            jj_consume_token(39);
                         formType = BodyType.addBelNewFocus;
            break;
          case 47:
            jj_consume_token(47);
                         formType = BodyType.addBel;
            break;
          case 48:
            jj_consume_token(48);
                         formType = BodyType.addBelEnd;
            break;
          default:
            jj_la1[23] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          break;
        default:
          jj_la1[24] = jj_gen;
          ;
        }
        break;
      case 40:
        jj_consume_token(40);
                         formType = BodyType.delBel;
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 39:
          jj_consume_token(39);
                         formType = BodyType.delAddBel;
          break;
        default:
          jj_la1[25] = jj_gen;
          ;
        }
        break;
      default:
        jj_la1[26] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[27] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 32:
      B = rule_plan_term();
      break;
    case VAR:
    case TK_TRUE:
    case TK_FALSE:
    case TK_NOT:
    case TK_NEG:
    case TK_BEGIN:
    case TK_END:
    case NUMBER:
    case STRING:
    case ATOM:
    case UNNAMEDVAR:
    case 39:
    case 40:
    case 44:
    case 49:
      B = log_expr();
      break;
    default:
      jj_la1[28] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                         if (formType == BodyType.action && B instanceof RelExpr) {
                            {if (true) return new PlanBodyImpl(BodyType.constraint, (RelExpr)B);} // constraint
                         }
                         if (B instanceof Plan) {
                           try {
                             InternalActionLiteral ia = null;
                             String ias = "";
                             if (formType == BodyType.delBel) {
                                ia = new InternalActionLiteral(ASSyntax.createStructure(".remove_plan", (Term)B), curAg);
                             } else if (formType == BodyType.addBel) {
                                ia = new InternalActionLiteral(ASSyntax.createStructure(".add_plan", (Term)B, BeliefBase.ASelf, new Atom("begin")), curAg);
                             } else if (formType == BodyType.addBelEnd) {
                                ia = new InternalActionLiteral(ASSyntax.createStructure(".add_plan", (Term)B, BeliefBase.ASelf, new Atom("end")), curAg);
                             } else {
                                {if (true) throw new ParseException(getSourceRef(B)+" Wrong combination of operator "+formType+" and plan.");}
                             }
                             {if (true) return new PlanBodyImpl(BodyType.internalAction, ia);}
                           } catch (Exception e) {
                             e.printStackTrace();
                           }
                         }
                         if (B instanceof Literal) {
                            if ( ((Literal)B).isInternalAction() )
                               formType = BodyType.internalAction;
                            {if (true) return new PlanBodyImpl(formType, (Literal)B);}
                         } else {
                                if (formType == BodyType.test) {
                                   if (B instanceof LogicalFormula)
                                      {if (true) return new PlanBodyImpl(BodyType.test, (Term)B);}  // used in ?(a & b)
                                   else
                                      {if (true) throw new ParseException(getSourceRef(B)+" The argument for ? is not a logical formula.");}
                                } else {
                               {if (true) return B;}
                                }
                         }
    throw new Error("Missing return statement in function");
  }

  final public Term rule_plan_term() throws ParseException {
                                    Trigger T = null; Object C = null; PlanBody B = null, B1 = null; Plan P = null;
                               boolean pb = true; // pb = "only plan body"
                               Pred L = null;
                               Literal h = null; Object t = null;
    jj_consume_token(32);
    if (jj_2_2(4)) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TK_LABEL_AT:
        jj_consume_token(TK_LABEL_AT);
        L = pred();
                              pb = false;
        break;
      default:
        jj_la1[29] = jj_gen;
        ;
      }
      T = trigger();
                              if (T.getType() != TEType.belief) pb = false;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 37:
        jj_consume_token(37);
        C = log_expr();
                              pb = false;
        break;
      default:
        jj_la1[30] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 38:
      case 43:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 38:
          jj_consume_token(38);
                              pb = false;
          break;
        case 43:
          jj_consume_token(43);
                              if (!pb) {if (true) throw new ParseException(getSourceRef(T)+" Wrong place for ';'");}
          break;
        default:
          jj_la1[31] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[32] = jj_gen;
        ;
      }
    } else {
      ;
    }
    if (jj_2_3(50)) {
      h = literal();
      jj_consume_token(34);
      t = log_expr();
    } else {
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case VAR:
    case TK_TRUE:
    case TK_FALSE:
    case TK_NOT:
    case TK_NEG:
    case TK_BEGIN:
    case TK_END:
    case TK_IF:
    case TK_FOR:
    case TK_WHILE:
    case NUMBER:
    case STRING:
    case ATOM:
    case UNNAMEDVAR:
    case 32:
    case 36:
    case 39:
    case 40:
    case 42:
    case 44:
    case 46:
    case 49:
      B = plan_body();
      break;
    default:
      jj_la1[33] = jj_gen;
      ;
    }
    jj_consume_token(33);
                             if (h != null) {
                                Rule r = new Rule(h,(LogicalFormula)t);
                                r.setAsTerm(true);
                                {if (true) return r;}
                             }
                             // the plan body case
                             if (T != null) {
                                // handle the case of "+a1", parsed as TE, need to be changed to plan's body
                                // handle the case of "+a1; +a2", parsed as "TE; Body"
                                if (pb && L == null) {
                                  if (T.isAddition())
                                     B1 = new PlanBodyImpl(BodyType.addBel, T.getLiteral(), true);
                                  else
                                     B1 = new PlanBodyImpl(BodyType.delBel, T.getLiteral(), true);
                                  if (B != null)
                                     B1.setBodyNext(B);
                                  {if (true) return B1;}
                                }
                                if (C == null && B == null && L == null) {
                                    // handle the case of a single trigger
                                    T.setAsTriggerTerm(true);
                                    {if (true) return T;}
                                } else {
                                    // handle the case of a entire plan
                                    Plan p = new Plan(L,T,(LogicalFormula)C, B);
                                    p.setSrcInfo(T.getSrcInfo());
                                    p.setAsPlanTerm(true);
                                    {if (true) return p;}
                                }
                             }

                             // the case of a simple plan body term
                             if (B == null)
                                B = new PlanBodyImpl();
                             B.setAsBodyTerm(true);
                             {if (true) return B;}
    throw new Error("Missing return statement in function");
  }

/* Literal */
  final public Literal literal() throws ParseException {
                                Pred F = null; Pred V; Token k; boolean type = Literal.LPos;
                                Atom NS = namespace; Token tns = null; boolean explicitAbstractNS = true;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case VAR:
    case TK_NEG:
    case TK_BEGIN:
    case TK_END:
    case ATOM:
    case UNNAMEDVAR:
    case 49:
      if (jj_2_4(10)) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case VAR:
        case ATOM:
        case UNNAMEDVAR:
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case ATOM:
            tns = jj_consume_token(ATOM);
                                if (tns.image.equals("default"))
                                     NS = Literal.DefaultNS;
                                else if (tns.image.equals("this_ns"))
                                     NS = thisnamespace;
                                else
                                     NS = new Atom(tns.image);
                                explicitAbstractNS = false;
            break;
          case VAR:
          case UNNAMEDVAR:
            NS = var(Literal.DefaultNS);
                                if (NS.hasAnnot())
                                   {if (true) throw new ParseException(getSourceRef(NS)+" name space cannot have annotations.");}
                                explicitAbstractNS = false;
            break;
          default:
            jj_la1[34] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          break;
        default:
          jj_la1[35] = jj_gen;
          ;
        }
        jj_consume_token(49);
                                if (explicitAbstractNS)
                                     NS = thisnamespace;
      } else {
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TK_NEG:
        jj_consume_token(TK_NEG);
                                type = Literal.LNeg;
        break;
      default:
        jj_la1[36] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TK_BEGIN:
      case TK_END:
      case ATOM:
        F = pred();
        break;
      case VAR:
      case UNNAMEDVAR:
        V = var(NS);
                                VarTerm vt = (VarTerm)V;
                                vt.setNegated(type);
                                {if (true) return vt;}
        break;
      default:
        jj_la1[37] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    case TK_TRUE:
      k = jj_consume_token(TK_TRUE);
                                {if (true) return Literal.LTrue;}
      break;
    case TK_FALSE:
      k = jj_consume_token(TK_FALSE);
                                {if (true) return Literal.LFalse;}
      break;
    default:
      jj_la1[38] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                                if (ASSyntax.isKeyword(F))
                                    NS = Literal.DefaultNS;
                                NS = nsDirective.map(NS);

                                if (F.getFunctor().indexOf(".") >= 0) {
                                   if (F.hasAnnot())
                                      {if (true) throw new ParseException(getSourceRef(F)+" Internal actions cannot have annotations.");}
                                   if (type == Literal.LNeg)
                                      {if (true) throw new ParseException(getSourceRef(F)+" Internal actions cannot be negated.");}
                                   try {
                                      if (F.getFunctor().equals(".include")) // .include needs a namespace (see its code)
                                         {if (true) return new InternalActionLiteral(NS, F, curAg);}
                                      else
                                         {if (true) return new InternalActionLiteral(F, curAg);}
                                   } catch (Exception e) {
                                      if (getArithFunction(F) == null) // it is not a registered function
                                         logger.warning(getSourceRef(F)+" warning: The internal action class for '"+F+"' was not loaded! Error: "+e);
                                   }
                                }

                                {if (true) return new LiteralImpl(NS, type, F);}
    throw new Error("Missing return statement in function");
  }

/* Annotated Formulae */
  final public Pred pred() throws ParseException {
                         Token K; Pred p; List l; ListTerm lt; Term b;
                         Atom ons = namespace; namespace = Literal.DefaultNS;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ATOM:
      K = jj_consume_token(ATOM);
      break;
    case TK_BEGIN:
      K = jj_consume_token(TK_BEGIN);
      break;
    case TK_END:
      K = jj_consume_token(TK_END);
      break;
    default:
      jj_la1[39] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                         p = new Pred(K.image);
                         p.setSrcInfo(new SourceInfo(asSource, K.beginLine));
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 44:
      jj_consume_token(44);
      l = terms();
      jj_consume_token(45);
                         p.setTerms(l);
      break;
    default:
      jj_la1[40] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 51:
      lt = list();
                         p.setAnnots(lt);
      break;
    default:
      jj_la1[41] = jj_gen;
      ;
    }
                         namespace = ons;
                         {if (true) return p;}
    throw new Error("Missing return statement in function");
  }

/* List of terms */
  final public List terms() throws ParseException {
                    ArrayList listTerms = new ArrayList(); Term v; PlanBody o;
    v = term();
                         listTerms.add(v);
    label_9:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 50:
        ;
        break;
      default:
        jj_la1[42] = jj_gen;
        break label_9;
      }
      jj_consume_token(50);
      v = term();
                         listTerms.add(v);
    }
                         listTerms.trimToSize();
                         {if (true) return listTerms;}
    throw new Error("Missing return statement in function");
  }

  final public Term term() throws ParseException {
                         Object o;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 51:
      o = list();
      break;
    case 32:
      o = rule_plan_term();
      break;
    case VAR:
    case TK_TRUE:
    case TK_FALSE:
    case TK_NOT:
    case TK_NEG:
    case TK_BEGIN:
    case TK_END:
    case NUMBER:
    case STRING:
    case ATOM:
    case UNNAMEDVAR:
    case 39:
    case 40:
    case 44:
    case 49:
      o = log_expr();
      break;
    default:
      jj_la1[43] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                         {if (true) return changeToAtom(o);}
    throw new Error("Missing return statement in function");
  }

  final public ListTermImpl list() throws ParseException {
                            ListTermImpl lt = new ListTermImpl(); ListTerm last; Token K; Term f;
    jj_consume_token(51);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case VAR:
    case TK_TRUE:
    case TK_FALSE:
    case TK_NEG:
    case TK_BEGIN:
    case TK_END:
    case NUMBER:
    case STRING:
    case ATOM:
    case UNNAMEDVAR:
    case 32:
    case 39:
    case 40:
    case 44:
    case 49:
    case 51:
      f = term_in_list();
                            last = lt.append(f); lt.setSrcInfo(f.getSrcInfo());
      label_10:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 50:
          ;
          break;
        default:
          jj_la1[44] = jj_gen;
          break label_10;
        }
        jj_consume_token(50);
        f = term_in_list();
                            last = last.append(f);
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 52:
        jj_consume_token(52);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case VAR:
          K = jj_consume_token(VAR);
                            last.setNext(new VarTerm(K.image));
          break;
        case UNNAMEDVAR:
          K = jj_consume_token(UNNAMEDVAR);
                            last.setNext(UnnamedVar.create(K.image));
          break;
        case 51:
          f = list();
                            last = last.concat((ListTerm)f);
          break;
        default:
          jj_la1[45] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[46] = jj_gen;
        ;
      }
      break;
    default:
      jj_la1[47] = jj_gen;
      ;
    }
    jj_consume_token(53);
                            {if (true) return lt;}
    throw new Error("Missing return statement in function");
  }

// term_in_list is the same as term, but log_expr/plan_body must be enclosed by "("....")" to avoid problem with |
  final public Term term_in_list() throws ParseException {
                            Object o;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 51:
      o = list();
      break;
    case VAR:
    case TK_TRUE:
    case TK_FALSE:
    case TK_NEG:
    case TK_BEGIN:
    case TK_END:
    case NUMBER:
    case ATOM:
    case UNNAMEDVAR:
    case 39:
    case 40:
    case 44:
    case 49:
      o = arithm_expr();
      break;
    case STRING:
      o = string();
      break;
    case 32:
      o = rule_plan_term();
      break;
    default:
      jj_la1[48] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                            {if (true) return changeToAtom(o);}
    throw new Error("Missing return statement in function");
  }

/* logical expression */
  final public Object log_expr() throws ParseException {
                              Object t1, t2;
    t1 = log_expr_trm();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 52:
      jj_consume_token(52);
      t2 = log_expr();
                              {if (true) return new LogExpr((LogicalFormula)t1,LogicalOp.or,(LogicalFormula)t2);}
      break;
    default:
      jj_la1[49] = jj_gen;
      ;
    }
                              {if (true) return t1;}
    throw new Error("Missing return statement in function");
  }

  final public Object log_expr_trm() throws ParseException {
                              Object t1, t2;
    t1 = log_expr_factor();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 54:
      jj_consume_token(54);
      t2 = log_expr_trm();
                              {if (true) return new LogExpr((LogicalFormula)t1,LogicalOp.and,(LogicalFormula)t2);}
      break;
    default:
      jj_la1[50] = jj_gen;
      ;
    }
                              {if (true) return t1;}
    throw new Error("Missing return statement in function");
  }

  final public Object log_expr_factor() throws ParseException {
                                      Object t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TK_NOT:
      jj_consume_token(TK_NOT);
      t = log_expr_factor();
                                      {if (true) return new LogExpr(LogicalOp.not,(LogicalFormula)t);}
      break;
    case VAR:
    case TK_TRUE:
    case TK_FALSE:
    case TK_NEG:
    case TK_BEGIN:
    case TK_END:
    case NUMBER:
    case STRING:
    case ATOM:
    case UNNAMEDVAR:
    case 39:
    case 40:
    case 44:
    case 49:
      t = rel_expr();
                                      {if (true) return t;}
      break;
    default:
      jj_la1[51] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

/* relational expression 
   used in context, body and term
   
     <VAR>      [ <OPREL> <EXP> ]  --> this method returns the VarTerm
   | <LITERAL>  [ <OPREL> <EXP> ]  --> returns the Literal
   | <EXP>      [ <OPREL> <EXP> ]  --> returns the ExprTerm 
*/
  final public Object rel_expr() throws ParseException {
                                             Object op1 = null;
                                             Object op2 = null;
                                             RelationalOp operator = RelationalOp.none;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case VAR:
    case TK_TRUE:
    case TK_FALSE:
    case TK_NEG:
    case TK_BEGIN:
    case TK_END:
    case NUMBER:
    case ATOM:
    case UNNAMEDVAR:
    case 39:
    case 40:
    case 44:
    case 49:
      op1 = arithm_expr();
      break;
    case STRING:
      op1 = string();
      break;
    default:
      jj_la1[52] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 47:
    case 48:
    case 55:
    case 56:
    case 57:
    case 58:
    case 59:
    case 60:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 47:
        jj_consume_token(47);
                                             operator = RelationalOp.lt;
        break;
      case 55:
        jj_consume_token(55);
                                             operator = RelationalOp.lte;
        break;
      case 48:
        jj_consume_token(48);
                                             operator = RelationalOp.gt;
        break;
      case 56:
        jj_consume_token(56);
                                             operator = RelationalOp.gte;
        break;
      case 57:
        jj_consume_token(57);
                                             operator = RelationalOp.eq;
        break;
      case 58:
        jj_consume_token(58);
                                             operator = RelationalOp.dif;
        break;
      case 59:
        jj_consume_token(59);
                                             operator = RelationalOp.unify;
        break;
      case 60:
        jj_consume_token(60);
                                             operator = RelationalOp.literalBuilder;
        break;
      default:
        jj_la1[53] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case VAR:
      case TK_TRUE:
      case TK_FALSE:
      case TK_NEG:
      case TK_BEGIN:
      case TK_END:
      case NUMBER:
      case ATOM:
      case UNNAMEDVAR:
      case 39:
      case 40:
      case 44:
      case 49:
        op2 = arithm_expr();
        break;
      case STRING:
        op2 = string();
        break;
      case 51:
        op2 = list();
        break;
      case 32:
        op2 = rule_plan_term();
        break;
      default:
        jj_la1[54] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
                                             if ( ((Term)op1).isInternalAction() && operator != RelationalOp.literalBuilder)
                                                {if (true) throw new ParseException(getSourceRef(op1)+" RelExpr: operand '"+op1+"' can not be an internal action.");}
                                             if ( ((Term)op2).isInternalAction() && operator != RelationalOp.literalBuilder)
                                                {if (true) throw new ParseException(getSourceRef(op2)+" RelExpr: operand '"+op2+"' can not be an internal action.");}
                                             {if (true) return new RelExpr((Term)op1, operator, (Term)op2);}
      break;
    default:
      jj_la1[55] = jj_gen;
      ;
    }
                                             {if (true) return op1;}
    throw new Error("Missing return statement in function");
  }

/* arithmetic expression */
  final public Object arithm_expr() throws ParseException {
                                Object t1, t2; ArithmeticOp op;
    t1 = arithm_expr_trm();
                                op = ArithmeticOp.none;
    label_11:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 39:
      case 40:
        ;
        break;
      default:
        jj_la1[56] = jj_gen;
        break label_11;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 39:
        jj_consume_token(39);
                                   op = ArithmeticOp.plus;
        break;
      case 40:
        jj_consume_token(40);
                                   op = ArithmeticOp.minus;
        break;
      default:
        jj_la1[57] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      t2 = arithm_expr_trm();
                                   if (!(t1 instanceof NumberTerm)) {
                                      {if (true) throw new ParseException(getSourceRef(t1)+" ArithExpr: first operand '"+t1+"' is not numeric or variable.");}
                                   }
                                   if (!(t2 instanceof NumberTerm)) {
                                      {if (true) throw new ParseException(getSourceRef(t2)+" ArithExpr: second operand '"+t2+"' is not numeric or variable.");}
                                   }
                                   t1 = new ArithExpr((NumberTerm)t1, op, (NumberTerm)t2);
    }
                                  {if (true) return t1;}
    throw new Error("Missing return statement in function");
  }

  final public Object arithm_expr_trm() throws ParseException {
                                  Object t1, t2; ArithmeticOp op;
    t1 = arithm_expr_factor();
                                  op = ArithmeticOp.none;
    label_12:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TK_INTDIV:
      case TK_INTMOD:
      case 61:
      case 62:
        ;
        break;
      default:
        jj_la1[58] = jj_gen;
        break label_12;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 61:
        jj_consume_token(61);
                                  op = ArithmeticOp.times;
        break;
      case 62:
        jj_consume_token(62);
                                  op = ArithmeticOp.div;
        break;
      case TK_INTDIV:
        jj_consume_token(TK_INTDIV);
                                  op = ArithmeticOp.intdiv;
        break;
      case TK_INTMOD:
        jj_consume_token(TK_INTMOD);
                                  op = ArithmeticOp.mod;
        break;
      default:
        jj_la1[59] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      t2 = arithm_expr_factor();
                                  if (!(t1 instanceof NumberTerm)) {
                                    {if (true) throw new ParseException(getSourceRef(t1)+" ArithTerm: first operand '"+t1+"' is not numeric or variable.");}
                                  }
                                  if (!(t2 instanceof NumberTerm)) {
                                    {if (true) throw new ParseException(getSourceRef(t2)+" ArithTerm: second operand '"+t2+"' is not numeric or variable.");}
                                  }
                                  t1 = new ArithExpr((NumberTerm)t1, op, (NumberTerm)t2);
    }
                                  {if (true) return t1;}
    throw new Error("Missing return statement in function");
  }

  final public Object arithm_expr_factor() throws ParseException {
                                  Object t1, t2; ArithmeticOp op;
    t1 = arithm_expr_simple();
                                  op = ArithmeticOp.none;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 63:
      jj_consume_token(63);
                                  op = ArithmeticOp.pow;
      t2 = arithm_expr_factor();
                                  if (!(t1 instanceof NumberTerm)) {
                                    {if (true) throw new ParseException(getSourceRef(t1)+" ArithFactor: first operand '"+t1+"' is not numeric or variable.");}
                                  }
                                  if (!(t2 instanceof NumberTerm)) {
                                    {if (true) throw new ParseException(getSourceRef(t2)+" ArithFactor: second operand '"+t2+"' is not numeric or variable.");}
                                  }
                                  {if (true) return new ArithExpr((NumberTerm)t1, op, (NumberTerm)t2);}
      break;
    default:
      jj_la1[60] = jj_gen;
      ;
    }
                                  {if (true) return t1;}
    throw new Error("Missing return statement in function");
  }

  final public Object arithm_expr_simple() throws ParseException {
                                  Token K; Object t; VarTerm v;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NUMBER:
      K = jj_consume_token(NUMBER);
                                  NumberTerm ni = ASSyntax.parseNumber(K.image);
                                  ni.setSrcInfo(new SourceInfo(asSource, K.beginLine));
                                  {if (true) return ni;}
      break;
    case 40:
      jj_consume_token(40);
      t = arithm_expr_simple();
                                  if (!(t instanceof NumberTerm)) {
                                    {if (true) throw new ParseException(getSourceRef(t)+" The argument '"+t+"' of operator '-' is not numeric or variable.");}
                                  }
                                  {if (true) return new ArithExpr(ArithmeticOp.minus, (NumberTerm)t);}
      break;
    case 39:
      jj_consume_token(39);
      t = arithm_expr_simple();
                                  if (!(t instanceof NumberTerm)) {
                                    {if (true) throw new ParseException(getSourceRef(t)+" The argument '"+t+"' of operator '+' is not numeric or variable.");}
                                  }
                                  {if (true) return new ArithExpr(ArithmeticOp.plus, (NumberTerm)t);}
      break;
    case 44:
      jj_consume_token(44);
      t = log_expr();
      jj_consume_token(45);
                                  {if (true) return t;}
      break;
    case VAR:
    case TK_TRUE:
    case TK_FALSE:
    case TK_NEG:
    case TK_BEGIN:
    case TK_END:
    case ATOM:
    case UNNAMEDVAR:
    case 49:
      t = function();
                                  {if (true) return t;}
      break;
    default:
      jj_la1[61] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public Term function() throws ParseException {
                            Literal l;
    l = literal();
                            ArithFunction af = getArithFunction(l);
                            if (af == null) {
                               {if (true) return l;}
                            } else {
                               ArithFunctionTerm at = new ArithFunctionTerm(af);
                               at.setSrcInfo(l.getSrcInfo());
                               at.setTerms(l.getTerms());
                               at.setAgent(curAg);
                               {if (true) return at;}
                            }
    throw new Error("Missing return statement in function");
  }

  final public VarTerm var(Atom ns) throws ParseException {
                             Token K; VarTerm v; ListTerm lt = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case VAR:
      K = jj_consume_token(VAR);
                      v = new VarTerm(ns, K.image); v.setSrcInfo(new SourceInfo(asSource, K.beginLine));
      break;
    case UNNAMEDVAR:
      K = jj_consume_token(UNNAMEDVAR);
                      v = UnnamedVar.create(ns, K.image);
      break;
    default:
      jj_la1[62] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 51:
      lt = list();
                      v.setAnnots(lt);
      break;
    default:
      jj_la1[63] = jj_gen;
      ;
    }
                      {if (true) return v;}
    throw new Error("Missing return statement in function");
  }

  final public StringTerm string() throws ParseException {
                      Token k; StringTermImpl s;
    k = jj_consume_token(STRING);
                      s = new StringTermImpl(k.image.substring(1,k.image.length()-1).replaceAll("\\\\n", "\n"));
                      s.setSrcInfo(new SourceInfo(asSource,k.beginLine));
                      {if (true) return s;}
    throw new Error("Missing return statement in function");
  }

  final private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  final private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  final private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  final private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  final private boolean jj_3R_31() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_47()) {
    jj_scanpos = xsp;
    if (jj_3R_48()) return true;
    }
    return false;
  }

  final private boolean jj_3R_132() {
    if (jj_3R_20()) return true;
    return false;
  }

  final private boolean jj_3R_110() {
    if (jj_scan_token(NUMBER)) return true;
    return false;
  }

  final private boolean jj_3R_22() {
    if (jj_scan_token(44)) return true;
    if (jj_3R_41()) return true;
    if (jj_scan_token(45)) return true;
    return false;
  }

  final private boolean jj_3R_140() {
    if (jj_scan_token(39)) return true;
    return false;
  }

  final private boolean jj_3R_131() {
    if (jj_3R_68()) return true;
    return false;
  }

  final private boolean jj_3R_103() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_110()) {
    jj_scanpos = xsp;
    if (jj_3R_111()) {
    jj_scanpos = xsp;
    if (jj_3R_112()) {
    jj_scanpos = xsp;
    if (jj_3R_113()) {
    jj_scanpos = xsp;
    if (jj_3R_114()) return true;
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_30() {
    if (jj_scan_token(41)) return true;
    return false;
  }

  final private boolean jj_3R_29() {
    if (jj_scan_token(40)) return true;
    return false;
  }

  final private boolean jj_3R_143() {
    if (jj_scan_token(48)) return true;
    return false;
  }

  final private boolean jj_3R_28() {
    if (jj_scan_token(39)) return true;
    return false;
  }

  final private boolean jj_3R_142() {
    if (jj_scan_token(47)) return true;
    return false;
  }

  final private boolean jj_3R_141() {
    if (jj_scan_token(39)) return true;
    return false;
  }

  final private boolean jj_3R_138() {
    if (jj_scan_token(40)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_140()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_16() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_28()) {
    jj_scanpos = xsp;
    if (jj_3R_29()) {
    jj_scanpos = xsp;
    if (jj_3R_30()) return true;
    }
    }
    xsp = jj_scanpos;
    if (jj_3R_31()) jj_scanpos = xsp;
    if (jj_3R_19()) return true;
    return false;
  }

  final private boolean jj_3R_139() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_141()) {
    jj_scanpos = xsp;
    if (jj_3R_142()) {
    jj_scanpos = xsp;
    if (jj_3R_143()) return true;
    }
    }
    return false;
  }

  final private boolean jj_3R_137() {
    if (jj_scan_token(39)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_139()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_136() {
    if (jj_scan_token(42)) return true;
    return false;
  }

  final private boolean jj_3R_13() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(25)) {
    jj_scanpos = xsp;
    if (jj_scan_token(14)) {
    jj_scanpos = xsp;
    if (jj_scan_token(15)) return true;
    }
    }
    xsp = jj_scanpos;
    if (jj_3R_22()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_23()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_135() {
    if (jj_scan_token(46)) return true;
    return false;
  }

  final private boolean jj_3R_134() {
    if (jj_scan_token(36)) return true;
    return false;
  }

  final private boolean jj_3R_130() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_134()) {
    jj_scanpos = xsp;
    if (jj_3R_135()) {
    jj_scanpos = xsp;
    if (jj_3R_136()) {
    jj_scanpos = xsp;
    if (jj_3R_137()) {
    jj_scanpos = xsp;
    if (jj_3R_138()) return true;
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_104() {
    if (jj_scan_token(63)) return true;
    if (jj_3R_98()) return true;
    return false;
  }

  final private boolean jj_3R_98() {
    if (jj_3R_103()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_104()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_128() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_130()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_131()) {
    jj_scanpos = xsp;
    if (jj_3R_132()) return true;
    }
    return false;
  }

  final private boolean jj_3R_57() {
    if (jj_scan_token(TK_LABEL_AT)) return true;
    return false;
  }

  final private boolean jj_3R_46() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_57()) jj_scanpos = xsp;
    if (jj_3R_16()) return true;
    return false;
  }

  final private boolean jj_3R_108() {
    if (jj_scan_token(TK_INTMOD)) return true;
    return false;
  }

  final private boolean jj_3R_107() {
    if (jj_scan_token(TK_INTDIV)) return true;
    return false;
  }

  final private boolean jj_3R_106() {
    if (jj_scan_token(62)) return true;
    return false;
  }

  final private boolean jj_3R_105() {
    if (jj_scan_token(61)) return true;
    return false;
  }

  final private boolean jj_3R_99() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_105()) {
    jj_scanpos = xsp;
    if (jj_3R_106()) {
    jj_scanpos = xsp;
    if (jj_3R_107()) {
    jj_scanpos = xsp;
    if (jj_3R_108()) return true;
    }
    }
    }
    if (jj_3R_98()) return true;
    return false;
  }

  final private boolean jj_3R_93() {
    if (jj_3R_98()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_99()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_127() {
    if (jj_scan_token(TK_WHILE)) return true;
    if (jj_scan_token(44)) return true;
    if (jj_3R_20()) return true;
    if (jj_scan_token(45)) return true;
    if (jj_3R_68()) return true;
    return false;
  }

  final private boolean jj_3R_36() {
    if (jj_scan_token(TK_FALSE)) return true;
    return false;
  }

  final private boolean jj_3R_35() {
    if (jj_scan_token(TK_TRUE)) return true;
    return false;
  }

  final private boolean jj_3R_51() {
    if (jj_3R_54()) return true;
    return false;
  }

  final private boolean jj_3R_101() {
    if (jj_scan_token(40)) return true;
    return false;
  }

  final private boolean jj_3R_45() {
    if (jj_scan_token(36)) return true;
    return false;
  }

  final private boolean jj_3R_100() {
    if (jj_scan_token(39)) return true;
    return false;
  }

  final private boolean jj_3R_50() {
    if (jj_3R_13()) return true;
    return false;
  }

  final private boolean jj_3R_94() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_100()) {
    jj_scanpos = xsp;
    if (jj_3R_101()) return true;
    }
    if (jj_3R_93()) return true;
    return false;
  }

  final private boolean jj_3R_49() {
    if (jj_scan_token(TK_NEG)) return true;
    return false;
  }

  final private boolean jj_3R_76() {
    if (jj_3R_93()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_94()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_126() {
    if (jj_scan_token(TK_FOR)) return true;
    if (jj_scan_token(44)) return true;
    if (jj_3R_20()) return true;
    if (jj_scan_token(45)) return true;
    if (jj_3R_68()) return true;
    return false;
  }

  final private boolean jj_3R_40() {
    if (jj_3R_54()) return true;
    return false;
  }

  final private boolean jj_3R_90() {
    if (jj_3R_68()) return true;
    return false;
  }

  final private boolean jj_3R_89() {
    if (jj_3R_42()) return true;
    return false;
  }

  final private boolean jj_3R_88() {
    if (jj_3R_77()) return true;
    return false;
  }

  final private boolean jj_3R_87() {
    if (jj_3R_76()) return true;
    return false;
  }

  final private boolean jj_3R_44() {
    if (jj_3R_19()) return true;
    return false;
  }

  final private boolean jj_3R_86() {
    if (jj_scan_token(60)) return true;
    return false;
  }

  final private boolean jj_3R_39() {
    if (jj_scan_token(ATOM)) return true;
    return false;
  }

  final private boolean jj_3R_85() {
    if (jj_scan_token(59)) return true;
    return false;
  }

  final private boolean jj_3R_21() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_39()) {
    jj_scanpos = xsp;
    if (jj_3R_40()) return true;
    }
    return false;
  }

  final private boolean jj_3R_84() {
    if (jj_scan_token(58)) return true;
    return false;
  }

  final private boolean jj_3R_83() {
    if (jj_scan_token(57)) return true;
    return false;
  }

  final private boolean jj_3_4() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_21()) jj_scanpos = xsp;
    if (jj_scan_token(49)) return true;
    return false;
  }

  final private boolean jj_3R_82() {
    if (jj_scan_token(56)) return true;
    return false;
  }

  final private boolean jj_3R_81() {
    if (jj_scan_token(48)) return true;
    return false;
  }

  final private boolean jj_3R_80() {
    if (jj_scan_token(55)) return true;
    return false;
  }

  final private boolean jj_3R_79() {
    if (jj_scan_token(47)) return true;
    return false;
  }

  final private boolean jj_3R_34() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_4()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_49()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_50()) {
    jj_scanpos = xsp;
    if (jj_3R_51()) return true;
    }
    return false;
  }

  final private boolean jj_3R_75() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_79()) {
    jj_scanpos = xsp;
    if (jj_3R_80()) {
    jj_scanpos = xsp;
    if (jj_3R_81()) {
    jj_scanpos = xsp;
    if (jj_3R_82()) {
    jj_scanpos = xsp;
    if (jj_3R_83()) {
    jj_scanpos = xsp;
    if (jj_3R_84()) {
    jj_scanpos = xsp;
    if (jj_3R_85()) {
    jj_scanpos = xsp;
    if (jj_3R_86()) return true;
    }
    }
    }
    }
    }
    }
    }
    xsp = jj_scanpos;
    if (jj_3R_87()) {
    jj_scanpos = xsp;
    if (jj_3R_88()) {
    jj_scanpos = xsp;
    if (jj_3R_89()) {
    jj_scanpos = xsp;
    if (jj_3R_90()) return true;
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_19() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_34()) {
    jj_scanpos = xsp;
    if (jj_3R_35()) {
    jj_scanpos = xsp;
    if (jj_3R_36()) return true;
    }
    }
    return false;
  }

  final private boolean jj_3R_74() {
    if (jj_3R_77()) return true;
    return false;
  }

  final private boolean jj_3R_73() {
    if (jj_3R_76()) return true;
    return false;
  }

  final private boolean jj_3R_133() {
    if (jj_scan_token(TK_ELSE)) return true;
    return false;
  }

  final private boolean jj_3R_129() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_133()) jj_scanpos = xsp;
    if (jj_3R_68()) return true;
    return false;
  }

  final private boolean jj_3R_67() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_73()) {
    jj_scanpos = xsp;
    if (jj_3R_74()) return true;
    }
    xsp = jj_scanpos;
    if (jj_3R_75()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_125() {
    if (jj_scan_token(TK_IF)) return true;
    if (jj_scan_token(44)) return true;
    if (jj_3R_20()) return true;
    if (jj_scan_token(45)) return true;
    if (jj_3R_68()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_129()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3_1() {
    if (jj_scan_token(TK_BEGIN)) return true;
    if (jj_3R_13()) return true;
    if (jj_scan_token(33)) return true;
    if (jj_3R_14()) return true;
    return false;
  }

  final private boolean jj_3R_43() {
    if (jj_scan_token(32)) return true;
    return false;
  }

  final private boolean jj_3R_59() {
    if (jj_3R_67()) return true;
    return false;
  }

  final private boolean jj_3R_58() {
    if (jj_scan_token(TK_NOT)) return true;
    if (jj_3R_52()) return true;
    return false;
  }

  final private boolean jj_3R_52() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_58()) {
    jj_scanpos = xsp;
    if (jj_3R_59()) return true;
    }
    return false;
  }

  final private boolean jj_3R_53() {
    if (jj_scan_token(54)) return true;
    if (jj_3R_37()) return true;
    return false;
  }

  final private boolean jj_3R_37() {
    if (jj_3R_52()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_53()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_38() {
    if (jj_scan_token(52)) return true;
    if (jj_3R_20()) return true;
    return false;
  }

  final private boolean jj_3R_124() {
    if (jj_scan_token(TK_PAND)) return true;
    if (jj_3R_118()) return true;
    return false;
  }

  final private boolean jj_3R_20() {
    if (jj_3R_37()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_38()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_102() {
    if (jj_3R_109()) return true;
    return false;
  }

  final private boolean jj_3R_123() {
    if (jj_3R_128()) return true;
    return false;
  }

  final private boolean jj_3R_122() {
    if (jj_3R_127()) return true;
    return false;
  }

  final private boolean jj_3R_121() {
    if (jj_3R_126()) return true;
    return false;
  }

  final private boolean jj_3R_120() {
    if (jj_3R_125()) return true;
    return false;
  }

  final private boolean jj_3_3() {
    if (jj_3R_19()) return true;
    if (jj_scan_token(34)) return true;
    if (jj_3R_20()) return true;
    return false;
  }

  final private boolean jj_3R_33() {
    if (jj_scan_token(43)) return true;
    return false;
  }

  final private boolean jj_3R_118() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_120()) {
    jj_scanpos = xsp;
    if (jj_3R_121()) {
    jj_scanpos = xsp;
    if (jj_3R_122()) {
    jj_scanpos = xsp;
    if (jj_3R_123()) return true;
    }
    }
    }
    xsp = jj_scanpos;
    if (jj_3R_124()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_32() {
    if (jj_scan_token(38)) return true;
    return false;
  }

  final private boolean jj_3R_72() {
    if (jj_3R_68()) return true;
    return false;
  }

  final private boolean jj_3R_71() {
    if (jj_3R_77()) return true;
    return false;
  }

  final private boolean jj_3R_17() {
    if (jj_scan_token(37)) return true;
    if (jj_3R_20()) return true;
    return false;
  }

  final private boolean jj_3R_18() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_32()) {
    jj_scanpos = xsp;
    if (jj_3R_33()) return true;
    }
    return false;
  }

  final private boolean jj_3R_70() {
    if (jj_3R_76()) return true;
    return false;
  }

  final private boolean jj_3R_69() {
    if (jj_3R_42()) return true;
    return false;
  }

  final private boolean jj_3R_15() {
    if (jj_scan_token(TK_LABEL_AT)) return true;
    if (jj_3R_13()) return true;
    return false;
  }

  final private boolean jj_3R_66() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_69()) {
    jj_scanpos = xsp;
    if (jj_3R_70()) {
    jj_scanpos = xsp;
    if (jj_3R_71()) {
    jj_scanpos = xsp;
    if (jj_3R_72()) return true;
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_97() {
    if (jj_3R_42()) return true;
    return false;
  }

  final private boolean jj_3R_96() {
    if (jj_scan_token(UNNAMEDVAR)) return true;
    return false;
  }

  final private boolean jj_3R_77() {
    if (jj_scan_token(STRING)) return true;
    return false;
  }

  final private boolean jj_3_2() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_15()) jj_scanpos = xsp;
    if (jj_3R_16()) return true;
    xsp = jj_scanpos;
    if (jj_3R_17()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_18()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_95() {
    if (jj_scan_token(VAR)) return true;
    return false;
  }

  final private boolean jj_3R_68() {
    if (jj_scan_token(32)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_2()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3_3()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_102()) jj_scanpos = xsp;
    if (jj_scan_token(33)) return true;
    return false;
  }

  final private boolean jj_3R_62() {
    if (jj_3R_42()) return true;
    return false;
  }

  final private boolean jj_3R_92() {
    if (jj_scan_token(52)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_95()) {
    jj_scanpos = xsp;
    if (jj_3R_96()) {
    jj_scanpos = xsp;
    if (jj_3R_97()) return true;
    }
    }
    return false;
  }

  final private boolean jj_3R_91() {
    if (jj_scan_token(50)) return true;
    if (jj_3R_66()) return true;
    return false;
  }

  final private boolean jj_3R_61() {
    if (jj_scan_token(UNNAMEDVAR)) return true;
    return false;
  }

  final private boolean jj_3R_27() {
    if (jj_3R_46()) return true;
    return false;
  }

  final private boolean jj_3R_60() {
    if (jj_scan_token(VAR)) return true;
    return false;
  }

  final private boolean jj_3R_56() {
    if (jj_3R_66()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_91()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_3R_92()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_54() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_60()) {
    jj_scanpos = xsp;
    if (jj_3R_61()) return true;
    }
    xsp = jj_scanpos;
    if (jj_3R_62()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_42() {
    if (jj_scan_token(51)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_56()) jj_scanpos = xsp;
    if (jj_scan_token(53)) return true;
    return false;
  }

  final private boolean jj_3R_26() {
    if (jj_3R_45()) return true;
    return false;
  }

  final private boolean jj_3R_25() {
    if (jj_3R_44()) return true;
    return false;
  }

  final private boolean jj_3R_65() {
    if (jj_3R_20()) return true;
    return false;
  }

  final private boolean jj_3R_119() {
    if (jj_scan_token(TK_POR)) return true;
    if (jj_3R_115()) return true;
    return false;
  }

  final private boolean jj_3R_64() {
    if (jj_3R_68()) return true;
    return false;
  }

  final private boolean jj_3R_63() {
    if (jj_3R_42()) return true;
    return false;
  }

  final private boolean jj_3R_24() {
    if (jj_3R_43()) return true;
    return false;
  }

  final private boolean jj_3R_55() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_63()) {
    jj_scanpos = xsp;
    if (jj_3R_64()) {
    jj_scanpos = xsp;
    if (jj_3R_65()) return true;
    }
    }
    return false;
  }

  final private boolean jj_3R_115() {
    if (jj_3R_118()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_119()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_14() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_24()) { jj_scanpos = xsp; break; }
    }
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_25()) { jj_scanpos = xsp; break; }
    }
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_26()) { jj_scanpos = xsp; break; }
    }
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_27()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(0)) return true;
    return false;
  }

  final private boolean jj_3R_117() {
    if (jj_3R_19()) return true;
    return false;
  }

  final private boolean jj_3R_116() {
    if (jj_3R_109()) return true;
    return false;
  }

  final private boolean jj_3R_78() {
    if (jj_scan_token(50)) return true;
    if (jj_3R_55()) return true;
    return false;
  }

  final private boolean jj_3R_114() {
    if (jj_3R_117()) return true;
    return false;
  }

  final private boolean jj_3R_113() {
    if (jj_scan_token(44)) return true;
    if (jj_3R_20()) return true;
    if (jj_scan_token(45)) return true;
    return false;
  }

  final private boolean jj_3R_41() {
    if (jj_3R_55()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_78()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_112() {
    if (jj_scan_token(39)) return true;
    if (jj_3R_103()) return true;
    return false;
  }

  final private boolean jj_3R_109() {
    if (jj_3R_115()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(43)) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_116()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_111() {
    if (jj_scan_token(40)) return true;
    if (jj_3R_103()) return true;
    return false;
  }

  final private boolean jj_3R_48() {
    if (jj_scan_token(42)) return true;
    return false;
  }

  final private boolean jj_3R_23() {
    if (jj_3R_42()) return true;
    return false;
  }

  final private boolean jj_3R_47() {
    if (jj_scan_token(36)) return true;
    return false;
  }

  public as2jTokenManager token_source;
  SimpleCharStream jj_input_stream;
  public Token token, jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  public boolean lookingAhead = false;
  private boolean jj_semLA;
  private int jj_gen;
  final private int[] jj_la1 = new int[64];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_0();
      jj_la1_1();
   }
   private static void jj_la1_0() {
      jj_la1_0 = new int[] {0x0,0x600cb80,0x0,0x0,0x0,0x10000,0x600cb80,0x0,0x200c000,0x0,0x10000,0x0,0x0,0x0,0x0,0x0,0x0,0x79acf80,0x400000,0x79acf80,0x200000,0x40000,0x40000,0x0,0x0,0x0,0x0,0x0,0x780cf80,0x10000,0x0,0x0,0x0,0x79acf80,0x6000080,0x6000080,0x800,0x600c080,0x600cb80,0x200c000,0x0,0x0,0x0,0x780cf80,0x0,0x4000080,0x0,0x780cb80,0x780cb80,0x0,0x0,0x780cf80,0x780cb80,0x0,0x780cb80,0x0,0x0,0x0,0x3000,0x3000,0x0,0x680cb80,0x4000080,0x0,};
   }
   private static void jj_la1_1() {
      jj_la1_1 = new int[] {0x1,0x20000,0x1,0x10,0x1,0x380,0x20000,0x1,0x0,0x4,0x0,0x20,0x40,0x380,0x410,0x410,0x800,0x25591,0x0,0x25591,0x0,0x0,0x1,0x18080,0x18080,0x80,0x4590,0x4590,0x21181,0x0,0x20,0x840,0x840,0x25591,0x0,0x0,0x0,0x0,0x20000,0x0,0x1000,0x80000,0x40000,0xa1181,0x40000,0x80000,0x100000,0xa1181,0xa1181,0x100000,0x400000,0x21180,0x21180,0x1f818000,0xa1181,0x1f818000,0x180,0x180,0x60000000,0x60000000,0x80000000,0x21180,0x0,0x80000,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[4];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  public as2j(java.io.InputStream stream) {
     this(stream, null);
  }
  public as2j(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new as2jTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 64; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 64; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public as2j(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new as2jTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 64; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 64; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public as2j(as2jTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 64; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(as2jTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 64; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  final private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  final private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }

  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

  final public Token getToken(int index) {
    Token t = lookingAhead ? jj_scanpos : token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  final private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.Vector jj_expentries = new java.util.Vector();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      boolean exists = false;
      for (java.util.Enumeration e = jj_expentries.elements(); e.hasMoreElements();) {
        int[] oldentry = (int[])(e.nextElement());
        if (oldentry.length == jj_expentry.length) {
          exists = true;
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              exists = false;
              break;
            }
          }
          if (exists) break;
        }
      }
      if (!exists) jj_expentries.addElement(jj_expentry);
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  public ParseException generateParseException() {
    jj_expentries.removeAllElements();
    boolean[] la1tokens = new boolean[64];
    for (int i = 0; i < 64; i++) {
      la1tokens[i] = false;
    }
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 64; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 64; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.addElement(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.elementAt(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  final public void enable_tracing() {
  }

  final public void disable_tracing() {
  }

  final private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 4; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  final private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

  }
